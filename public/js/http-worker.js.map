{"version":3,"file":"js/http-worker.js?id=905c8af412df41257591","sources":["webpack:///./resources/js/Services/Http/WorkerService.js"],"sourcesContent":["import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar WorkerService = /*#__PURE__*/function () {\n  function WorkerService(Events) {\n    _classCallCheck(this, WorkerService);\n\n    this.$events = Events;\n  }\n\n  _createClass(WorkerService, [{\n    key: \"install\",\n    value: function () {\n      var _install = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!this.isSupported) {\n                  _context.next = 6;\n                  break;\n                }\n\n                _context.next = 3;\n                return navigator.serviceWorker.register('/worker.js', {\n                  scope: '.'\n                }).then(function () {\n                  return navigator.serviceWorker.ready;\n                }).then(this.onInstalled.bind(this), this.onFailed.bind(this));\n\n              case 3:\n                return _context.abrupt(\"return\", _context.sent);\n\n              case 6:\n                console.warn('ServiceWorker UnAvailable');\n\n              case 7:\n                return _context.abrupt(\"return\", Promise.reject(new Error('ServiceWorker UnAvailable')));\n\n              case 8:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function install() {\n        return _install.apply(this, arguments);\n      }\n\n      return install;\n    }()\n    /**\n     * Registration Successful Handler.\n     * @param registration {ServiceWorkerRegistration}\n     */\n\n  }, {\n    key: \"onInstalled\",\n    value: function onInstalled(registration) {\n      this.$events.$emit('worker:registered', registration);\n    }\n    /**\n     * Registration Failed Handler.\n     * @param error {Error}\n     */\n\n  }, {\n    key: \"onFailed\",\n    value: function onFailed(error) {\n      this.$events.$emit('worker:failed', error);\n    }\n    /**\n     * Dispatch Event to Queue Worker.\n     * @param job {Object}\n     * @return {Promise}\n     * @docs https://html.spec.whatwg.org/multipage/workers.html#dom-worker-postmessage\n     */\n\n  }, {\n    key: \"dispatch\",\n    value: function dispatch(job) {\n      var _this = this;\n\n      return new Promise(function (resolve, reject) {\n        if (!_this.isSupported || !_this.isAvailable) reject();\n        var channel = new MessageChannel();\n\n        channel.port1.onmessage = function (event) {\n          if (event.data.error) {\n            reject(event.data.error);\n          } else {\n            resolve(event.data);\n          }\n        };\n\n        navigator.serviceWorker.controller.postMessage(job, [channel.port2]);\n      });\n    }\n  }, {\n    key: \"isSupported\",\n    get: function get() {\n      return 'navigator' in window && 'serviceWorker' in navigator;\n    }\n  }, {\n    key: \"isAvailable\",\n    get: function get() {\n      return navigator.serviceWorker.controller;\n    }\n  }]);\n\n  return WorkerService;\n}();\n\nexport { WorkerService as default };"],"mappings":";;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A;;A","sourceRoot":""}